/*
 * Copyright (c) 2021 AVI-SPL Inc. All Rights Reserved.
 */
package com.avispl.symphony.dal.communicator.aver.ptz.enums;

/**
 * This class used to define reply packet
 *
 * @author Harry
 * @version 1.0
 * @since 1.0
 */
public enum ReplyPacket {
	COMPLETION(new byte[] { 0x01, 0x11, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x51, (byte) 0xFF }),
	POWER_ON(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x02, (byte) 0xFF }),
	POWER_OFF(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x03, (byte) 0xFF }),
	FOCUS_AUTO_MODE(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x02, (byte) 0xFF }),
	FOCUS_MANUAL_MODE(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x03, (byte) 0xFF }),
	AE_FULL_AUTO_MODE(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x00, (byte) 0xFF }),
	AE_MANUAL_MODE(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x03, (byte) 0xFF }),
	AE_SHUTTER_PRIORITY_MODE(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x0A, (byte) 0xFF }),
	AE_IRIS_PRIORITY_MODE(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x0B, (byte) 0xFF }),
	AUTO_SLOW_SHUTTER_ON(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x02, (byte) 0xFF }),
	AUTO_SLOW_SHUTTER_OFF(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x03, (byte) 0xFF }),
	SHUTTER_SPEED(new byte[] { 0x01, 0x11, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x00, 0x00, 0x00, 0x0F, (byte) 0xFF }),
	IRIS_LEVEL(new byte[] { 0x01, 0x11, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x00, 0x00, 0x00, 0x0D, (byte) 0xFF }),
	GAIN_LEVEL(new byte[] { 0x01, 0x11, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x00, 0x00, 0x02, 0x0D, (byte) 0xFF }),
	EXPOSURE_VALUE(new byte[] { 0x01, 0x11, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x00, 0x00, 0x00, 0x09, (byte) 0xFF }),
	RGAIN(new byte[] { 0x01, 0x11, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x00, 0x00, 0x00, 0x01, (byte) 0xFF }),
	BGAIN(new byte[] { 0x01, 0x11, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x00, 0x00, 0x00, 0x01, (byte) 0xFF }),
	GAIN_LIMIT_LEVEL(new byte[] { 0x01, 0x11, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x90, 0x50, 0x08, (byte) 0xFF });

	private final byte[] code;

	ReplyPacket(byte[] code) {
		this.code = code;
	}

	/**
	 * Retrieves {@code {@link #code}}
	 *
	 * @return value of {@link #code}
	 */
	public byte[] getCode() {
		return code;
	}
}
